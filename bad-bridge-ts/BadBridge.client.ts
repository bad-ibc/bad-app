/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.31.6.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { CosmWasmClient, SigningCosmWasmClient, ExecuteResult } from "@cosmjs/cosmwasm-stargate";
import { StdFee } from "@cosmjs/amino";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Uint128, Binary, QueryType, QueryRegisteredQueryResponse, RegisteredQuery, Coin, KVKey, Height, TransferNftResponse } from "./BadBridge.types";
export interface BadBridgeReadOnlyInterface {
  contractAddress: string;
  transferNft: ({
    queryId
  }: {
    queryId: number;
  }) => Promise<TransferNftResponse>;
  getRegisteredQuery: ({
    queryId
  }: {
    queryId: number;
  }) => Promise<QueryRegisteredQueryResponse>;
}
export class BadBridgeQueryClient implements BadBridgeReadOnlyInterface {
  client: CosmWasmClient;
  contractAddress: string;

  constructor(client: CosmWasmClient, contractAddress: string) {
    this.client = client;
    this.contractAddress = contractAddress;
    this.transferNft = this.transferNft.bind(this);
    this.getRegisteredQuery = this.getRegisteredQuery.bind(this);
  }

  transferNft = async ({
    queryId
  }: {
    queryId: number;
  }): Promise<TransferNftResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      transfer_nft: {
        query_id: queryId
      }
    });
  };
  getRegisteredQuery = async ({
    queryId
  }: {
    queryId: number;
  }): Promise<QueryRegisteredQueryResponse> => {
    return this.client.queryContractSmart(this.contractAddress, {
      get_registered_query: {
        query_id: queryId
      }
    });
  };
}
export interface BadBridgeInterface extends BadBridgeReadOnlyInterface {
  contractAddress: string;
  sender: string;
  mintNft: ({
    tokenId
  }: {
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  registerTransferNftQuery: ({
    connectionId,
    contractAddress,
    minHeight,
    recipient,
    sender,
    tokenId,
    updatePeriod
  }: {
    connectionId: string;
    contractAddress: string;
    minHeight: number;
    recipient: string;
    sender: string;
    tokenId: string;
    updatePeriod: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  removeInterchainQuery: ({
    queryId
  }: {
    queryId: number;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
  unlockNft: ({
    destination,
    tokenId
  }: {
    destination: string;
    tokenId: string;
  }, fee?: number | StdFee | "auto", memo?: string, _funds?: Coin[]) => Promise<ExecuteResult>;
}
export class BadBridgeClient extends BadBridgeQueryClient implements BadBridgeInterface {
  client: SigningCosmWasmClient;
  sender: string;
  contractAddress: string;

  constructor(client: SigningCosmWasmClient, sender: string, contractAddress: string) {
    super(client, contractAddress);
    this.client = client;
    this.sender = sender;
    this.contractAddress = contractAddress;
    this.mintNft = this.mintNft.bind(this);
    this.registerTransferNftQuery = this.registerTransferNftQuery.bind(this);
    this.removeInterchainQuery = this.removeInterchainQuery.bind(this);
    this.unlockNft = this.unlockNft.bind(this);
  }

  mintNft = async ({
    tokenId
  }: {
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      mint_nft: {
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
  registerTransferNftQuery = async ({
    connectionId,
    contractAddress,
    minHeight,
    recipient,
    sender,
    tokenId,
    updatePeriod
  }: {
    connectionId: string;
    contractAddress: string;
    minHeight: number;
    recipient: string;
    sender: string;
    tokenId: string;
    updatePeriod: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      register_transfer_nft_query: {
        connection_id: connectionId,
        contract_address: contractAddress,
        min_height: minHeight,
        recipient,
        sender,
        token_id: tokenId,
        update_period: updatePeriod
      }
    }, fee, memo, _funds);
  };
  removeInterchainQuery = async ({
    queryId
  }: {
    queryId: number;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      remove_interchain_query: {
        query_id: queryId
      }
    }, fee, memo, _funds);
  };
  unlockNft = async ({
    destination,
    tokenId
  }: {
    destination: string;
    tokenId: string;
  }, fee: number | StdFee | "auto" = "auto", memo?: string, _funds?: Coin[]): Promise<ExecuteResult> => {
    return await this.client.execute(this.sender, this.contractAddress, {
      unlock_nft: {
        destination,
        token_id: tokenId
      }
    }, fee, memo, _funds);
  };
}