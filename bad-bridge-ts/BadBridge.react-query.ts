/**
* This file was automatically generated by @cosmwasm/ts-codegen@0.26.0.
* DO NOT MODIFY IT BY HAND. Instead, modify the source JSONSchema file,
* and run the @cosmwasm/ts-codegen generate command to regenerate this file.
*/

import { UseQueryOptions, useQuery } from "@tanstack/react-query";
import { InstantiateMsg, ExecuteMsg, QueryMsg, Uint64, Uint128, Binary, QueryType, QueryRegisteredQueryResponse, RegisteredQuery, Coin, KVKey, Height, String, NftTransfersResponse, NftTransfer } from "./BadBridge.types";
import { BadBridgeQueryClient } from "./BadBridge.client";
export interface BadBridgeReactQuery<TResponse, TData = TResponse> {
  client: BadBridgeQueryClient;
  options?: UseQueryOptions<TResponse, Error, TData>;
}
export interface BadBridgeGetQueryIdQuery<TData> extends BadBridgeReactQuery<Uint64, TData> {
  args: {
    tokenId: string;
  };
}
export function useBadBridgeGetQueryIdQuery<TData = Uint64>({
  client,
  args,
  options
}: BadBridgeGetQueryIdQuery<TData>) {
  return useQuery<Uint64, Error, TData>(["badBridgeGetQueryId", client.contractAddress, JSON.stringify(args)], () => client.getQueryId({
    tokenId: args.tokenId
  }), options);
}
export interface BadBridgeGetRegisteredQueryQuery<TData> extends BadBridgeReactQuery<QueryRegisteredQueryResponse, TData> {
  args: {
    queryId: number;
  };
}
export function useBadBridgeGetRegisteredQueryQuery<TData = QueryRegisteredQueryResponse>({
  client,
  args,
  options
}: BadBridgeGetRegisteredQueryQuery<TData>) {
  return useQuery<QueryRegisteredQueryResponse, Error, TData>(["badBridgeGetRegisteredQuery", client.contractAddress, JSON.stringify(args)], () => client.getRegisteredQuery({
    queryId: args.queryId
  }), options);
}
export interface BadBridgeNftTransfersQuery<TData> extends BadBridgeReactQuery<NftTransfersResponse, TData> {
  args: {
    sender: string;
  };
}
export function useBadBridgeNftTransfersQuery<TData = NftTransfersResponse>({
  client,
  args,
  options
}: BadBridgeNftTransfersQuery<TData>) {
  return useQuery<NftTransfersResponse, Error, TData>(["badBridgeNftTransfers", client.contractAddress, JSON.stringify(args)], () => client.nftTransfers({
    sender: args.sender
  }), options);
}
export interface BadBridgeTokenDenomQuery<TData> extends BadBridgeReactQuery<String, TData> {
  args: {
    tokenId: string;
  };
}
export function useBadBridgeTokenDenomQuery<TData = String>({
  client,
  args,
  options
}: BadBridgeTokenDenomQuery<TData>) {
  return useQuery<String, Error, TData>(["badBridgeTokenDenom", client.contractAddress, JSON.stringify(args)], () => client.tokenDenom({
    tokenId: args.tokenId
  }), options);
}
export interface BadBridgeIcaAccountQuery<TData> extends BadBridgeReactQuery<String, TData> {}
export function useBadBridgeIcaAccountQuery<TData = String>({
  client,
  options
}: BadBridgeIcaAccountQuery<TData>) {
  return useQuery<String, Error, TData>(["badBridgeIcaAccount", client.contractAddress], () => client.icaAccount(), options);
}